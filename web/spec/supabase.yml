openref: 0.1

info:
  title:  Supabase Client
  description: |
    
    Our client library is modular. Each sub-library is a standalone implementation for a single external system. This is one of the ways we support existing tools.

    - **`supabase-{lang}`**: Combines libraries and adds enrichments.
      - `postgrest-{lang}`: Client library to work with [PostgREST](https://github.com/postgrest/postgrest) 
      - `realtime-{lang}`: Client library to work with [Realtime](https://github.com/supabase/realtime)    
      - `gotrue-{lang}`: Client library to work with [GoTrue](https://github.com/netlify/gotrue)         

    
    | Repo                                                                                       | Official                                         | Community        |
    |-----------------------|--------------------------------------------------|------------------|
    | **`supabase-{lang}`**     | [`JS`](https://github.com/supabase/supabase-js) | [`C#`](https://github.com/supabase/supabase-csharp) \| [`Python`](https://github.com/supabase/supabase-py) \| `Rust` |
    | `postgrest-{lang}` | [`JS`](https://github.com/supabase/postgrest-js) | [`C#`](https://github.com/supabase/postgrest-csharp) \| [`Python`](https://github.com/supabase/postgrest-py) \| [`Rust`](https://github.com/supabase/postgrest-rs) |
    | `realtime-{lang}`  | [`JS`](https://github.com/supabase/realtime-js) | `C#` \| `Python` \| `Rust` |
    | `gotrue-{lang}`    | [`JS`](https://github.com/supabase/gotrue-js) | `C#` \| `Python` \| `Rust` |


    
  definition: spec/combined.json
  libraries: 
    - name: 'JavaScript'
      id: 'js'
      version: '0.0.1'
    - name: 'Python'
      id: 'py'
      version: '0.0.1'
  docs:
    sidebar:
      - name: 'Supabase Client'
        items:
          - index
          - Installing
          - Initializing
      - name: 'Auth'
        items:
          - Sign up
          - Sign in
          - Sign out
          - Get the logged in user
          - Update the logged in user
          - Reset password
          - Listen to auth change events
      - name: 'Reading data'
        items:
          - Select data
          - Limit rows returned
          - Order data
      - name: 'Data operations'
        items:
          - Insert data
          - Update rows
          - Delete rows
      - name: Stored Procedures
        items:
          - .rpc()
      - name: 'Filters'
        items:
          - Using Filters
          - .eq()
          - .neq()
          - .gt()
          - .gte()
          - .lt()
          - .lte()
          - .like()
          - .ilike()
          - .is()
          - .in()
          - .cs()
          - .cd()
          - .sl()
          - .sr()
          - .nxl()
          - .nxr()
          - .adj()
          - .ov()
          - .fts()
          - .plfts()
          - .phfts()
          - .wfts()

pages:

  Installing: 
    description: |
      All JavaScript libraries are built directly by the Supabase team. 
      
      Other languages are built by the community and supported by Supabase.

      ## Javascript

      ```bash
      npm install @supabase/postgrest-js
      ```

      - [Source code](https://github.com/supabase/postgrest-js)

      ## Python

      ```bash
      # Not yet implemented

  Initializing: 
    $ref: '@supabase/supabase-js."SupabaseClient".SupabaseClient.constructor'


  Sign up:
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.signUp'
    examples:
      - name: Sign up
        isSpotlight: true
        js: |
          ```js
          const { error, data } = await supabase.auth.signUp({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
        py: | 
          ```py
          # Not yet implemented
          ```

  Sign in:
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.signIn'
    notes: |
      - A user can sign up either via email or OAuth.
      - If you provide `email`, `password` is also required
      - If you provide `access_token`, `password` is also required
    examples:
      - name: Sign in
        isSpotlight: true
        js: |
          ```js
          const { error, data } = await supabase.auth.signIn({
            email: 'example@email.com',
            password: 'example-password',
          })
          ```
        py: | 
          ```py
          # Not yet implemented
          ```

  Sign out:
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.signOut'
    examples:
      - name: Sign out
        js: |
          ```js
          const { error, data } = await supabaseSign out
          ```

  Get the logged in user:
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.user'
    examples:
      - name: Get user
        js: |
          ```js
          const { error, data } = await supabaseGet the logged in user
          ```
  Update the logged in user:
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.update'

  Listen to auth change events: 
    $ref: '@supabase/gotrue-js."GoTrueClient".GoTrueClient.onAuthStateChange'

  Reset password:
    $ref: '@supabase/gotrue-js."GoTrueApi".GoTrueApi.resetPasswordForEmail'

  Select data:
    $ref: '@supabase/postgrest-js."lib/PostgrestQueryBuilder".PostgrestQueryBuilder.select'
  
  Limit rows returned:
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.limit'
  
  Order data:
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.order'

  Insert data:
    $ref: '@supabase/postgrest-js."lib/PostgrestQueryBuilder".PostgrestQueryBuilder.insert'

  Update rows:
    $ref: '@supabase/postgrest-js."lib/PostgrestQueryBuilder".PostgrestQueryBuilder.update'

  Delete rows:
    $ref: '@supabase/postgrest-js."lib/PostgrestQueryBuilder".PostgrestQueryBuilder.delete'

  .rpc():
    $ref: '@supabase/postgrest-js."PostgrestClient".PostgrestClient.rpc'


  Using Filters: 
    description: |
      Filters can be used on `select()`, `update()`, and `delete()` queries.

  .eq():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.eq'

  .neq():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.neq'

  .gt():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.gt'

  .gte():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.gte'

  .lt():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.lt'

  .lte():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.lte'

  .like():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.like'

  .ilike():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.ilike'

  .is():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.is'

  .in():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.in'

  .cs():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.cs'

  .cd():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.cd'

  .sl():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.sl'

  .sr():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.sr'

  .nxl():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.nxl'

  .nxr():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.nxr'

  .adj():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.adj'

  .ov():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.ov'

  .fts():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.fts'

  .plfts():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.plfts'

  .phfts():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.phfts'

  .wfts():
    $ref: '@supabase/postgrest-js."lib/PostgrestFilterBuilder".PostgrestFilterBuilder.wfts'